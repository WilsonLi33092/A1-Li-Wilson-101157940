package org.example;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class COMPULS_A_TEST {
  @Test
    public void testCompulsoryATest() {
      Decks deck = new Decks();
      EventCard event = new EventCard();
      QuestCard questCard = new QuestCard();
      deck.intializeEventDeck();
      deck.intializeAdventureDeck();
      deck.dealPlayersHands();
      deck.getCurrentPlayerTurn();
      deck.drawEventCard();
      Player playerOne = new Player(1);
      Player playerTwo = new Player(2);
      Player playerThree = new Player(3);
      Player playerFour = new Player(4);
      playerOne.setHand(deck.player1Hand);
      playerTwo.setHand(deck.player2Hand);
      playerThree.setHand(deck.player3Hand);
      playerFour.setHand(deck.player4Hand);
      List<Card> sponsorCardList = new ArrayList<>();
      Card foe1Player1 = new Card();
      Card foe2Player1 = new Card();
      Card weapon1Player1 = new Card();
      Card weapon2Player1 = new Card();
      Card weapon3Player1 = new Card();
      Card weapon4Player1 = new Card();
      Card weapon5Player1 = new Card();
      foe1Player1.setType("Foe");
      foe1Player1.setValue(5);
      foe1Player1.setSortValue(1);
      foe2Player1.setType("Foe");
      foe2Player1.setValue(15);
      foe2Player1.setSortValue(3);
      weapon1Player1.setType("Dagger");
      weapon1Player1.setValue(5);
      weapon1Player1.setSortValue(11);
      weapon2Player1.setType("Sword");
      weapon2Player1.setValue(10);
      weapon2Player1.setSortValue(12);
      weapon3Player1.setType("Horse");
      weapon3Player1.setValue(10);
      weapon3Player1.setSortValue(13);
      weapon4Player1.setType("Battle-Axe");
      weapon4Player1.setValue(15);
      weapon4Player1.setSortValue(14);
      weapon5Player1.setType("Lance");
      weapon5Player1.setValue(20);
      weapon5Player1.setSortValue(15);
      Card foe3Player2 = new Card();
      Card weapon5Player2 = new Card();
      foe3Player2.setType("Foe");
      foe3Player2.setValue(40);
      foe3Player2.setSortValue(8);
      weapon5Player2.setType("Excalibur");
      weapon5Player2.setValue(50);
      weapon5Player2.setSortValue(16);
      ArrayList<Card> riggedPlayer1Hand = new ArrayList<>();
      ArrayList<Card> riggedPlayer2Hand = new ArrayList<>();
      ArrayList<Card> riggedPlayer3Hand = new ArrayList<>();
      ArrayList<Card> riggedPlayer4Hand = new ArrayList<>();
      riggedPlayer1Hand.add(foe1Player1);
      riggedPlayer1Hand.add(foe1Player1);
      riggedPlayer1Hand.add(foe2Player1);
      riggedPlayer1Hand.add(foe2Player1);
      riggedPlayer1Hand.add(weapon1Player1);
      riggedPlayer1Hand.add(weapon2Player1);
      riggedPlayer1Hand.add(weapon2Player1);
      riggedPlayer1Hand.add(weapon3Player1);
      riggedPlayer1Hand.add(weapon3Player1);
      riggedPlayer1Hand.add(weapon4Player1);
      riggedPlayer1Hand.add(weapon4Player1);
      riggedPlayer1Hand.add(weapon5Player1);
      playerOne.setHand(riggedPlayer1Hand);
      riggedPlayer2Hand.add(foe1Player1);
      riggedPlayer2Hand.add(foe1Player1);
      riggedPlayer2Hand.add(foe2Player1);
      riggedPlayer2Hand.add(foe2Player1);
      riggedPlayer2Hand.add(foe3Player2);
      riggedPlayer2Hand.add(weapon1Player1);
      riggedPlayer2Hand.add(weapon2Player1);
      riggedPlayer2Hand.add(weapon3Player1);
      riggedPlayer2Hand.add(weapon3Player1);
      riggedPlayer2Hand.add(weapon4Player1);
      riggedPlayer2Hand.add(weapon4Player1);
      riggedPlayer2Hand.add(weapon5Player2);
      playerTwo.setHand(riggedPlayer2Hand);
      riggedPlayer3Hand.add(foe1Player1);
      riggedPlayer3Hand.add(foe1Player1);
      riggedPlayer3Hand.add(foe1Player1);
      riggedPlayer3Hand.add(foe2Player1);
      riggedPlayer3Hand.add(weapon1Player1);
      riggedPlayer3Hand.add(weapon2Player1);
      riggedPlayer3Hand.add(weapon2Player1);
      riggedPlayer3Hand.add(weapon2Player1);
      riggedPlayer3Hand.add(weapon3Player1);
      riggedPlayer3Hand.add(weapon3Player1);
      riggedPlayer3Hand.add(weapon4Player1);
      riggedPlayer3Hand.add(weapon5Player1);
      playerThree.setHand(riggedPlayer3Hand);
      riggedPlayer4Hand.add(foe1Player1);
      riggedPlayer4Hand.add(foe2Player1);
      riggedPlayer4Hand.add(foe2Player1);
      riggedPlayer4Hand.add(foe3Player2);
      riggedPlayer4Hand.add(weapon1Player1);
      riggedPlayer4Hand.add(weapon1Player1);
      riggedPlayer4Hand.add(weapon2Player1);
      riggedPlayer4Hand.add(weapon3Player1);
      riggedPlayer4Hand.add(weapon3Player1);
      riggedPlayer4Hand.add(weapon4Player1);
      riggedPlayer4Hand.add(weapon5Player1);
      riggedPlayer4Hand.add(weapon5Player2);
      playerFour.setHand(riggedPlayer4Hand);
      String drawnCard = deck.drawEventCard();
      drawnCard = "Quest 4";
      int currentPlayerTurn = deck.getCurrentPlayerTurn();
      List<String> decisions = Arrays.asList("N", "Y", "N", "N");
      int revisedPlayerTurn = questCard.questCardDrawn(currentPlayerTurn, decisions);
      Stage stage1 = new Stage(List.of(foe1Player1, weapon3Player1));
      Stage stage2 = new Stage(List.of(foe2Player1, weapon2Player1));
      Stage stage3 = new Stage(List.of(foe2Player1, weapon1Player1,weapon4Player1));
      Stage stage4 = new Stage(List.of(foe3Player2, weapon4Player1));
      ArrayList<Stage> stages = new ArrayList<>();
      stages.add(stage1);
      stages.add(stage2);
      stages.add(stage3);
      stages.add(stage4);
      List<Player> participants = List.of(playerOne, playerThree, playerFour);
      Quest quest = new Quest(stages, playerTwo, participants);
      quest.promptParticipation(1, playerOne, "continue");
      Card player1DrawCardStage1 = deck.drawCard();
      player1DrawCardStage1.setType("Foe");
      player1DrawCardStage1.setValue(30);
      player1DrawCardStage1.setSortValue(6);
      playerOne.getHand().add(player1DrawCardStage1);
      playerOne.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
      Card player1stage1Remove = playerOne.trimHand(playerOne.getHand(), 1);
      playerOne.getHand().remove(player1stage1Remove);
    quest.promptParticipation(1, playerThree, "continue");
    Card player3DrawCardStage1 = deck.drawCard();
    player3DrawCardStage1.setType("Sword");
    player3DrawCardStage1.setValue(10);
    player3DrawCardStage1.setSortValue(12);
    playerThree.getHand().add(player3DrawCardStage1);
    playerThree.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
    Card player3stage1Remove = playerThree.trimHand(playerThree.getHand(), 1);
    playerThree.getHand().remove(player3stage1Remove);
    quest.promptParticipation(1, playerFour, "continue");
    Card player4DrawCardStage1 = deck.drawCard();
    player4DrawCardStage1.setType("Battle-Axe");
    player4DrawCardStage1.setValue(15);
    player4DrawCardStage1.setSortValue(14);
    playerFour.getHand().add(player4DrawCardStage1);
    playerFour.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
    Card player4stage1Remove = playerFour.trimHand((playerFour.getHand()), 1);
    playerFour.getHand().remove(player4stage1Remove);
    List<Player> remainingPlayers = quest.getEligibleParticipants(1);
    Attack attack1 = new Attack(playerOne);
    quest.promptPlayerForAttack(playerOne, "4", attack1);
    quest.promptPlayerForAttack(playerOne, "5", attack1);
    Attack attack2 = new Attack(playerThree);
    quest.promptPlayerForAttack(playerThree, "4", attack2);
    quest.promptPlayerForAttack(playerThree, "3", attack2);
    Attack attack3 = new Attack(playerFour);
    quest.promptPlayerForAttack(playerFour, "3", attack3);
    quest.promptPlayerForAttack(playerFour, "5", attack3);
    List<Attack> playerAttacks = new ArrayList<>();
    playerAttacks.add(attack1);
    playerAttacks.add(attack2);
    playerAttacks.add(attack3);
    quest.resolveStage(stage1, playerAttacks, remainingPlayers);
    quest.promptParticipation(2, playerOne, "continue");
    Card player1DrawCardStage2 = deck.drawCard();
    player1DrawCardStage2.setType("Foe");
    player1DrawCardStage2.setValue(10);
    player1DrawCardStage2.setSortValue(2);
    playerOne.getHand().add(player1DrawCardStage2);
    playerOne.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
    quest.promptParticipation(2, playerThree, "continue");
    Card player3DrawCardStage2 = deck.drawCard();
    player3DrawCardStage2.setType("Lance");
    player3DrawCardStage2.setValue(20);
    player3DrawCardStage2.setSortValue(15);
    playerThree.getHand().add(player3DrawCardStage2);
    playerThree.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
    quest.promptParticipation(2, playerFour, "continue");
    Card player4DrawCardStage2 = deck.drawCard();
    player4DrawCardStage2.setType("Lance");
    player4DrawCardStage2.setValue(20);
    player4DrawCardStage2.setSortValue(15);
    playerFour.getHand().add(player4DrawCardStage2);
    playerFour.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
    attack1.clearAttack();
    attack2.clearAttack();
    attack3.clearAttack();
    quest.promptPlayerForAttack(playerOne, "6", attack1);
    quest.promptPlayerForAttack(playerOne, "5", attack1);
    quest.promptPlayerForAttack(playerThree, "8", attack2);
    quest.promptPlayerForAttack(playerThree, "3", attack2);
    quest.promptPlayerForAttack(playerFour, "5", attack3);
    quest.promptPlayerForAttack(playerFour, "5", attack3);
    quest.resolveStage(stage2, List.of(attack1,attack2,attack3), remainingPlayers);

    assertEquals(0, playerOne.getShields());
    List<Card> checkPlayerOneHand = new ArrayList<>();
    checkPlayerOneHand.add(foe1Player1);
    checkPlayerOneHand.add(player1DrawCardStage2);
    checkPlayerOneHand.add(foe2Player1);
    checkPlayerOneHand.add(foe2Player1);
    checkPlayerOneHand.add(player1DrawCardStage1);
    checkPlayerOneHand.add(weapon3Player1);
    checkPlayerOneHand.add(weapon4Player1);
    checkPlayerOneHand.add(weapon4Player1);
    checkPlayerOneHand.add(weapon5Player1);
    assertEquals(checkPlayerOneHand, playerOne.getHand());

    quest.promptParticipation(3, playerThree, "continue");
    Card player3DrawCardStage3 = deck.drawCard();
    player3DrawCardStage3.setType("Battle-Axe");
    player3DrawCardStage3.setValue(15);
    player3DrawCardStage3.setSortValue(14);
    playerThree.getHand().add(player3DrawCardStage3);
    playerThree.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
    quest.promptParticipation(3, playerFour, "continue");
    Card player4DrawCardStage3 = deck.drawCard();
    player4DrawCardStage3.setType("Sword");
    player4DrawCardStage3.setValue(10);
    player4DrawCardStage3.setSortValue(12);
    playerFour.getHand().add(player4DrawCardStage3);
    playerFour.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
    attack1.clearAttack();
    attack2.clearAttack();
    attack3.clearAttack();
    quest.promptPlayerForAttack(playerThree, "8", attack2);
    quest.promptPlayerForAttack(playerThree, "5", attack2);
    quest.promptPlayerForAttack(playerThree, "3",attack2);
    quest.promptPlayerForAttack(playerFour, "6", attack3);
    quest.promptPlayerForAttack(playerFour, "4", attack3);
    quest.promptPlayerForAttack(playerFour, "5", attack3);
    quest.resolveStage(stage3, List.of(attack2,attack3), remainingPlayers);

    quest.promptParticipation(4, playerThree, "continue");
    Card player3DrawCardStage4 = deck.drawCard();
    player3DrawCardStage4.setType("Foe");
    player3DrawCardStage4.setValue(30);
    player3DrawCardStage4.setSortValue(6);
    playerThree.getHand().add(player3DrawCardStage4);
    playerThree.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
    quest.promptParticipation(4, playerFour, "continue");
    Card player4DrawCardStage4 = deck.drawCard();
    player4DrawCardStage4.setType("Lance");
    player4DrawCardStage4.setValue(20);
    player4DrawCardStage4.setSortValue(15);
    playerFour.getHand().add(player4DrawCardStage4);
    playerFour.getHand().sort(Comparator.comparingInt(card -> card.sortValue));
    attack2.clearAttack();
    attack3.clearAttack();
    quest.promptPlayerForAttack(playerThree, "6", attack2);
    quest.promptPlayerForAttack(playerThree, "5", attack2);
    quest.promptPlayerForAttack(playerThree, "5",attack2);
    quest.promptPlayerForAttack(playerFour, "3", attack3);
    quest.promptPlayerForAttack(playerFour, "3", attack3);
    quest.promptPlayerForAttack(playerFour, "3", attack3);
    quest.promptPlayerForAttack(playerFour, "4", attack3);
    quest.resolveStage(stage4, List.of(attack2,attack3), remainingPlayers);

    assertEquals(0,playerThree.getShields());
    List<Card> checkPlayerThreeHand = new ArrayList<>();
    checkPlayerThreeHand.add(foe1Player1);
    checkPlayerThreeHand.add(foe1Player1);
    checkPlayerThreeHand.add(foe2Player1);
    checkPlayerThreeHand.add(player3DrawCardStage4);
    checkPlayerThreeHand.add(player3DrawCardStage1);
    assertEquals(checkPlayerThreeHand, playerThree.getHand());

    assertEquals(4, playerFour.getShields());
    List<Card> checkPlayerFourHand = new ArrayList<>();
    checkPlayerFourHand.add(foe2Player1);
    checkPlayerFourHand.add(foe2Player1);
    checkPlayerFourHand.add(foe3Player2);
    checkPlayerFourHand.add(player4DrawCardStage4);
    assertEquals(checkPlayerFourHand, playerFour.getHand());
    assertEquals(12,playerTwo.getHand().size());






  }
}